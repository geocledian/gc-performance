"use strict";const gcPerformanceLocales={en:{options:{title:"Crop performance comparison"},description:{id:"ID",parcel:"Parcel",sdate:"Sensing date",n_other_parcels:"Nb. of Parcels"},date_format_hint:"YYYY-MM-DD"},de:{options:{title:"Feldvergleich"},description:{id:"Nr",parcel:"Feld",sdate:"Aufnahmedatum",n_other_parcels:"Anzahl Felder"},date_format_hint:"JJJJ-MM-TT"}};Vue.component("gc-performance",{props:{gcWidgetId:{type:String,default:"performance1",required:!0},gcApikey:{type:String,default:"39553fb7-7f6f-4945-9b84-a4c8745bdbec"},gcHost:{type:String,default:"geocledian.com"},gcProxy:{type:String,default:void 0},gcApiBaseUrl:{type:String,default:"/agknow/api/v4"},gcApiSecure:{type:Boolean,default:!0},gcParcelId:{default:-1},gcSelectedDate:{type:String,default:""},gcSelectedDateStats:{type:Object,default:{}},gcAvailableOptions:{type:String,default:"title,description,dateSelector"},gcWidgetCollapsed:{type:Boolean,default:!0},gcLanguage:{type:String,default:"en"},gcWhiteLabel:{type:Boolean,default:!1},gcCrop:{type:String,default:""},gcEntity:{type:String,default:""}},template:'<div :id="gcWidgetId" class="gc-performance" style="max-width: 18.0rem; min-width: 8rem;">       \n\n              <p :class="[\'gc-options-title\', \'is-size-6\', gcWidgetCollapsed ? \'gc-is-primary\' : \'gc-is-tertiary\']" \n                style="cursor: pointer; margin-bottom: 1em;" \n                v-on:click="togglePerfchart"   \n                v-show="this.availableOptions.includes(\'title\')">\n                {{ $t(\'options.title\') }}\n                <i :class="[gcWidgetCollapsed ? \'\': \'is-active\', \'fas\', \'fa-angle-down\', \'fa-sm\']"></i>\n              </p>\n\n              \x3c!-- widget container --\x3e\n              <div :class="[gcWidgetCollapsed ? \'\': \'is-hidden\']">\n               <div class="is-flex">\n                <div :id="\'desc_\' + gcWidgetId" class="gc-is-tertiary" v-show="this.availableOptions.includes(\'description\')">\n                  \x3c!-- span class="has-text-weight-bold is-size-7">{{ $t(\'options.subtitle\') }}</span><br --\x3e\n                  <span class="has-text-weight-bold is-size-7">{{ $t(\'description.parcel\') }} {{ $t(\'description.id\') }}: {{this.currentParcelID}}</span><br>\n                  <span class="is-size-7">{{ $t(\'description.n_other_parcels\') }}: {{this.performance.length}}</span><br>\n                </div>\n\n                <div class="field-body is-horizontal" style="margin-left: 1em;"\n                    v-show="this.availableOptions.includes(\'dateSelector\')">\n                  <div class="control" style="padding-bottom: 0px; max-width: 5.8rem;">\n                    <input :id="\'inpSdate_\'+this.gcWidgetId" type="text" class="input is-small" :placeholder="$t(\'date_format_hint\')" style="height: 2.1rem;"\n                      v-model="selectedDate">\n                  </div>\n                </div>\n                </div>\n\n                \x3c!-- watermark --\x3e\n                <div :class="[this.gcWhiteLabel ? \'is-hidden\': \'is-inline-block\', \'is-pulled-right\']"\n                  style="opacity: 0.65;">\n                  <span style="vertical-align: top; font-size: 0.7rem;">powered by</span><br>\n                  <img src="img/logo.png" alt="geo|cledian" style="width: 100px; margin: -10px 0;">\n                </div>\n               \n\n                \x3c!-- watermark message --\x3e\n                <div class="notification gc-api-message" style="position: relative; opacity: 1.0; margin-bottom: 0.5rem; z-index: 1001; font-size: 0.9rem;"\n                  v-show="watermark_msg.length>0" v-html="$t(watermark_msg)  +  \'<br>\' + $t(\'api_err_msg.support\')">\n                </div>\n      \n                \x3c!-- other api messages --\x3e\n                <div class="notification gc-api-message" v-show="api_err_msg.length > 0" v-html="$t(api_err_msg) +  \'<br>\' + $t(\'api_err_msg.support\')"></div>\n\n                \n                <div class="chartSpinner spinner" v-show="isloading">\n                  <div class="rect1"></div>\n                  <div class="rect2"></div>\n                  <div class="rect3"></div>\n                  <div class="rect4"></div>\n                  <div class="rect5"></div>\n                </div>\n\n                \x3c!-- v-show directive does not play nice with billboard.js so put it one layer above! --\x3e\n                \x3c!-- div style="position: relative;" v-show="api_err_msg.length==0" --\x3e\n                <div style="position: relative; margin-top: 1.5em; margin-bottom: 1em;">\n                  <div v-show="isloading == false">\n                  <div>\n                    <div :id="\'chart_\'+gcWidgetId" class="gc-performance-chart"></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \x3c!-- chart --\x3e',data:function(){return{chart:void 0,ranking:void 0,inpSdatePicker:void 0,internalSelectedDate:"",api_err_msg:"",watermark_msg:"",isloading:!0,internalSelectedDateStats:{}}},computed:{apiKey:{get:function(){return this.gcApikey}},apiHost:{get:function(){return this.gcHost}},apiBaseUrl:{get:function(){return this.gcApiBaseUrl}},apiSecure:{get:function(){return this.gcApiSecure}},apiMajorVersion:{get(){return"/agknow/api/v3"===this.apiBaseUrl?3:"/agknow/api/v4"===this.apiBaseUrl?4:void 0}},currentParcelID:{get:function(){return this.gcParcelId}},selectedDate:{get:function(){if(this.gcSelectedDate.length>0){if(this.isDateValid(this.gcSelectedDate))return this.gcSelectedDate}else if(this.isDateValid(this.internalSelectedDate))return this.internalSelectedDate},set:function(value){console.debug("selectedDate - setter: "+value),this.isDateValid(value)&&(this.$root.$emit("queryDateChange",value),this.internalSelectedDate=value)}},selectedDateStats:{get:function(){return this.internalSelectedDateStats},set:function(value){this.$root.$emit("queryDateStatsChange",value)}},availableOptions:{get:function(){return this.gcAvailableOptions.split(",")}},currentLanguage:{get:function(){return this.gcLanguage}},performance:{get:function(){return this.ranking?this.ranking.map(r=>r.ranking.mean):[]}},crop:{get:function(){return this.gcCrop}},entity:{get:function(){return this.gcEntity}}},i18n:{locale:this.currentLanguage,messages:gcPerformanceLocales},created:function(){console.debug("gc-performance! - created()"),this.changeLanguage()},mounted:function(){console.debug("gc-performance! - mounted()"),this.$root.$on("containerSizeChange",this.containerSizeChange),this.gcParcelId>0&&(this.currentParcelID=this.gcParcelId,this.handleCurrentParcelIDchange()),this.availableOptions.includes("dateSelector")&&this.initDatePickers()},watch:{currentParcelID:function(newValue,oldValue){console.debug("event - currentParcelIDChange"),this.handleCurrentParcelIDchange(newValue,oldValue)},selectedDate:function(newValue,oldValue){console.debug("event - sdateChange"),this.isDateValid(this.selectedDate)&&this.getRanking()},performance:{handler:function(newValue,oldValue){console.debug("event - performanceChange"),this.createChartData()},deep:!0},currentLanguage(newValue,oldValue){this.changeLanguage(),this.createChartData(),this.initDatePickers()}},methods:{getApiUrl:function(endpoint){let protocol="http";return this.apiSecure&&(protocol+="s"),this.gcProxy?protocol+"://"+this.gcProxy+this.apiBaseUrl+endpoint:protocol+"://"+this.gcHost+this.apiBaseUrl+endpoint+"?key="+this.apiKey},togglePerfchart:function(){this.gcWidgetCollapsed=!this.gcWidgetCollapsed},containerSizeChange(size){this.chart&&setTimeout(function(){this.chart.resize()}.bind(this),200)},handleCurrentParcelIDchange:function(){console.debug("methods - handleCurrentParcelIDchange"),this.currentParcelID>0&&(this.filterDetailData(),this.getRanking())},filterDetailData:function(){console.debug("methods - filterDetailData")},getCurrentParcel:function(){return{parcel_id:this.currentParcelID}},getRanking:function(){this.api_err_msg="",this.watermark_msg="",this.isloading=!0,this.chart&&this.chart.unload(),this.ranking=void 0;const endpoint="/ranking";if(!this.isDateValid(this.selectedDate))return void(this.isloading=!1);let params="&ranking_date="+this.selectedDate+"&product=ndvi&crop="+this.crop+"&entity="+this.entity;console.debug("getRanking()"),console.debug("GET "+this.getApiUrl(endpoint)+params),axios({method:"GET",url:this.getApiUrl(endpoint)+params}).then(function(response){if(console.debug(response),200===response.status)try{var result=response.data;4===this.apiMajorVersion&&(this.ranking=result.content,console.debug(this.ranking),this.getStatisticsSingleDate())}catch(err){console.error(err),this.api_err_msg=err,this.isloading=!1}else this.api_err_msg=response.data,this.isloading=!1}.bind(this)).catch(err=>{this.api_err_msg=err.response.data,this.isloading=!1})},getStatisticsSingleDate:function(){const endpoint="/parcels/"+this.currentParcelID+"/ndvi/";if(!this.isDateValid(this.selectedDate))return void(this.isloading=!1);let params="&source=sentinel2&statistics=true";console.debug("getRanking()"),console.debug("GET "+this.getApiUrl(endpoint)+params),axios({method:"GET",url:this.getApiUrl(endpoint)+params}).then(function(response){if(console.debug(response),200===response.status)try{var result=response.data;if(4===this.apiMajorVersion){if(console.debug(result),!(result.content.length>0))return void(this.isloading=!1);{let idx=this.getClosestTimeSeriesIndex(result.content,this.selectedDate);console.debug(idx),console.debug(result.content[idx].statistics),this.internalSelectedDateStats=result.content[idx].statistics,this.isloading=!1,this.createChartData()}}}catch(err){console.error(err),this.api_err_msg=err}else this.api_err_msg=response.data,this.isloading=!1}.bind(this)).catch(err=>{this.api_err_msg=err.response.data,this.isloading=!1})},createChartData:function(){console.debug("createChartData()");let columns=[];if(4===this.apiMajorVersion&&this.performance.length>0){let median=this.formatDecimal(d3.quantile(this.performance,.5),2),min=this.formatDecimal(Math.min(...this.performance),2),max=this.formatDecimal(Math.max(...this.performance),2);console.debug(this.selectedDateStats);let current=this.formatDecimal(this.selectedDateStats.mean,2),pct25=this.formatDecimal(d3.quantile(this.performance,.25),2),pct75=this.formatDecimal(d3.quantile(this.performance,.75),2);columns[0]=["data"].concat({open:pct25,high:max,low:min,close:pct75,current:current,median:median}),this.createChart(columns)}},createChart:function(data){console.debug("createChart()"),console.debug(data);let median=data[0][1].median,min=data[0][1].low,max=data[0][1].high,current=data[0][1].current;this.chart=bb.generate({bindto:"#chart_"+this.gcWidgetId,data:{columns:data,type:"candlestick",colors:{data:"#EF7D00"}},candlestick:{width:{data:32}},axis:{x:{show:!1,type:"category"},rotated:!0,y:{}},grid:{y:{lines:[{value:min,text:"",class:"gc-candlestick-min"},{value:median,text:"",class:"gc-candlestick-median"},{value:current,text:this.$t("description.parcel"),class:"gc-candlestick-current"},{value:max,text:"",class:"gc-candlestick-max"}]},front:!0},tooltip:{contents:function(d,defaultTitleFormat,defaultValueFormat,color){if(d[0].value){let html='<table class="bb-tooltip"><tbody><tr><th colspan="2">NDVI</th></tr>',open=d[0].value.open,high=d[0].value.high,low=d[0].value.low,close=d[0].value.close,median=d[0].value.median,current=d[0].value.current,index=d[0].index,name=d[0].name;console.debug(open,high,low,close,median,current,index,name);let map={low:"minimum",open:"Q1",median:"median",close:"Q2",high:"maximum",current:this.$t("description.parcel")},keys=Object.keys(d[0].value),sortingKeys=Object.keys(map);keys=keys.sort((function(a,b){return sortingKeys.indexOf(a)-sortingKeys.indexOf(b)}));for(let i=0;i<keys.length;i++){let key=keys[i];html+='<tr class="bb-tooltip-'+map[key]+'"><td class="bb-tooltip"><b>'+map[key]+':</b></td><td class="bb-tooltip">'+d[0].value[key]+"</td></tr>"}return html}}.bind(this)},legend:{show:!1},transition:{duration:500}})},initDatePickers(){console.debug("initDatePickers()"),this.inpSdatePicker&&this.inpSdatePicker.destroy(),this.inpSdatePicker=new bulmaCalendar(document.getElementById("inpSdate_"+this.gcWidgetId),{startDate:new Date(Date.parse(this.selectedDate)),dateFormat:"yyyy-mm-dd",lang:this.currentLanguage,overlay:!1,align:"right",closeOnOverlayClick:!0,closeOnSelect:!0,onSelect:function(e){var a=new Date(e.valueOf()+864e5);this.selectedDate=a.toISOString().split("T")[0]}.bind(this)}),console.debug(this.inpSdatePicker)},changeLanguage(){this.$i18n.locale=this.currentLanguage},removeFromArray:function(arry,value){let index=arry.indexOf(value);return index>-1&&arry.splice(index,1),arry},formatDecimal:function(decimal,numberOfDecimals){var factor=100;return isNaN(parseFloat(decimal))?NaN:(1==numberOfDecimals&&(factor=10),2==numberOfDecimals&&(factor=100),3==numberOfDecimals&&(factor=1e3),4==numberOfDecimals&&(factor=1e4),5==numberOfDecimals&&(factor=1e5),Math.ceil(decimal*factor)/factor)},capitalize:function(s){return"string"!=typeof s?"":s.charAt(0).toUpperCase()+s.slice(1)},isDateValid:function(date_str){return!isNaN(new Date(date_str))},getClosestDate:function(arr,queryDate){let i;return console.debug("getClosestDate()"),arr.sort((function(a,b){var distancea,distanceb;return Math.abs(queryDate-a)-Math.abs(queryDate-b)}))[0]},getClosestTimeSeriesIndex:function(timeseries,queryDate){const exactDate=this.getClosestDate(timeseries.map(d=>new Date(d.date)),new Date(queryDate));if(void 0!==exactDate)return console.debug("closest date of given date "+queryDate+" is "+exactDate.simpleDate()),timeseries.map(d=>d.date).indexOf(exactDate.simpleDate())},loadJSscript:function(url,callback){let script=document.createElement("script");script.src=gcGetBaseURL()+"/"+url,script.async=!0,console.debug(script.src),document.body.appendChild(script),script.onload=function(){callback()}}}});